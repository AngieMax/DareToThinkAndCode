package com.java.concepts;
/*
*Word Count Engine
*/
//Implement a document scanning engine that receives a text document doc and returns a list of all unique words in it 
//and their number of occurrences, sorted by the number of occurrences in descending order.
//Example:
//for doc: "practice makes perfect. get perfect by practice. just practice!"
//the engine returns the list: { practice: 3, perfect: 2,  makes: 1, get: 1, by: 1, just: 1 }.

import java.io.*;
import java.util.*;

public class WordCountEngine{

	public static void main(String[] args) {
		Map<String, Integer> map = new LinkedHashMap<String, Integer>();

		String[] doc = { "practice", "makes", "perfect", "get", "perfect",
				"by", "practice", "just", "practice" };
		
		for (int i = 0; i < doc.length; i++) {
			if (map.containsKey(doc[i]))
				map.put(doc[i], map.get(doc[i]) + 1);
			else
				map.put(doc[i], 1);
		}
		
		Comparator<String> comparator = new OrderByValueComprator(map);
		Map<String, Integer> treemap = new TreeMap<String, Integer>(comparator);
		treemap.putAll(map);
		// System.out.println(treemap);
		
		for (Map.Entry<String, Integer> entry : treemap.entrySet()) {
			System.out.print(entry.getKey());
			System.out.println(" :  " + entry.getValue());
			System.out.println();
		}

	}

}

class OrderByValueComprator implements Comparator<String> {
	Map<String, Integer> map;

	public OrderByValueComprator(Map<String, Integer> map) {
		super();
		this.map = map;
	}

	@Override
	public int compare(String o1, String o2) {
		// return map.get(o2)-map.get(o1);
		if (map.get(o1) >= map.get(o2))
			return -1;
		else
			return 1;
		// return 0;
	}

}
